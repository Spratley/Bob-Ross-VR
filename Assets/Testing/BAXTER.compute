// Each #kernel tells which function to compile; you can have many kernels
//#pragma kernel CSMain2
#pragma kernel InitCanvas
#pragma kernel AddBrushVelocity
#pragma kernel Advect
#pragma kernel AdvectC
#pragma kernel GaussSeidelIteration
#pragma kernel Project1_Divergence
#pragma kernel Project3_ApplyPressure
#pragma kernel ConvertPigmentsToRGB
#pragma kernel AddDensityToLocation
#pragma kernel TransferBrushPaint
#pragma kernel DepositBrushPaint
#pragma kernel ComputeNormalMap

// global shader parameters 
float InputX;
float InputY;
float InputXP;
float InputYP;
float IDX;
float IDY;
float BRUSH_WIN_WIDTH;
float PickX;
float PickY;
float PAINT_DRY_RATE;

float theTime;
float Strength;
float Radius;
float3 CenterLocation;
float3 Channel;
float4 BrushPaint1;
float4 BrushPaint2;

struct BRUSH_BRISTLE
{
    float4 pigment1;
    float4 pigment2;
};

RWStructuredBuffer<BRUSH_BRISTLE> bristleBuffer;

// Velocity field,
Texture2D<float4> Velocity_in;
SamplerState samplerVelocity_in; 
RWTexture2D<float4> Velocity_out;

Texture2D<float4> Boundary_in;
SamplerState samplerBoundary_in; 



Texture2D<float4> Pigments1_in;
Texture2D<float4> Pigments2_in;
Texture2D<float4> PaintVolume_in;

RWTexture2D<float4> Pigments1_out;
RWTexture2D<float4> Pigments2_out;
RWTexture2D<float4> PaintVolume_out;

/* Density, density & temp s0*/
Texture2D<float4> Density_in;
SamplerState samplerDensity_in;
RWTexture2D<float4> Density_out;

Texture2D<float4> Density2_in;
SamplerState samplerDensity2_in;
RWTexture2D<float4> Density2_out;

RWTexture2D<float4> Colour_out;
Texture2D<float> HEIGHTMAP_in;
SamplerState samplerHEIGHTMAP_in;
RWTexture2D<float> HEIGHTMAP_out;
RWTexture2D<float4> Normals_out;
Texture2D<float4> CANVAS_in;
SamplerState samplerCANVAS_in;

Texture2D<float4> BrushTexture_in;
SamplerState samplerBrushTexture_in;
RWTexture2D<float4> BrushTexture_out;
Texture2D<float4> BrushTexture2_in;
SamplerState samplerBrushTexture2_in;
RWTexture2D<float4> BrushTexture2_out;

Texture2D<float4> BrushMask_in;
SamplerState samplerBrushMask_in;

Texture2D<float4> BaseLayer1_in;
SamplerState samplerBaseLayer1_in;
Texture2D<float4> BaseLayer2_in;
SamplerState samplerBaseLayer2_in;
RWTexture2D<float4> BaseLayer1_out;
RWTexture2D<float4> BaseLayer2_out;




float dt;
/* parameters */
float DiffusionConstant_a;
float DiffusionConstant_c;

float ViscosityConstant;

/* divergence */
RWTexture2D<float3> Divergence_out;
/* pressure field */
Texture2D<float> Pressure_in;
RWTexture2D<float> Pressure_out;


///////////////////////////////////////
// KERNEL START
///////////////////////////////////////

[numthreads(8,8,1)]
void InitCanvas(uint2 id:SV_DispatchThreadID)
{
    // output: Pigments1_out
    // output: Pigments2_out
    // output: PaintVolume_out
    // output: Velocity_out
    //float4 canvas = Canvas_in[id];
uint2 dim;
    Velocity_out.GetDimensions(dim.x,dim.y);
        float2 uv = (id + 0.5)/dim;
    Pigments1_out[id] = float4(0,0,0,0);
    Pigments2_out[id] = float4(0.00001,0,0.0,0);
    PaintVolume_out[id] = float4(0,0,0,0);
    Velocity_out[id] = float4(0,0,0,0);
    float H = 1000000.0f*length(HEIGHTMAP_in.SampleLevel(samplerHEIGHTMAP_in, uv, 0));
    HEIGHTMAP_out[id] = float4(H,H,H,H);
    BaseLayer1_out[id] = float4(0,0,0,0);
    BaseLayer2_out[id] = float4(0,0.1f,0,0);

}

[numthreads(8,8,1)]
void AddBrushVelocity(uint2 id: SV_DispatchThreadID)
{
    // input: IDX,IDY, InputX, InputY, Velocity_in
    // output: Velocity_out
  
    uint2 dim;
    Velocity_out.GetDimensions(dim.x,dim.y);

    float2 uv = (id + 0.5)/dim;
    float2 dI = float2(IDX,IDY);
    float2 I = float2(InputX,InputY);
    float d = distance(uv,I);
    float2 dUV = (dI);
    float dist = length(uv-I);
    float4 VIN = Velocity_in[id];

        // brush mask is 1 where the brush is currently, 0 everywhere else
    float bMask = BrushMask_in.SampleLevel(samplerBrushMask_in, uv, 0).r;
    float H = HEIGHTMAP_in.SampleLevel(samplerHEIGHTMAP_in, uv, 0).r;

    // dUV is the velocity in the direction of the brush 
    float strength = Strength/(H);//25.0f; // SHOULD BE PASSED IN
//    if(dist < BRUSH_WIN_WIDTH) strength= (.01f/(dist*dist));
    dUV = dUV* strength*bMask;

    // dUVT is the tangential component from location to the center of the brush
    float strength2 = 1.0f/strength;//0.1f; // SHOULD BE PASSED IN
    float2 dUVT = normalize(uv-I)*strength2*bMask; // pull from pixel to brush center 
  //   float2 dUVT = normalize(I-uv)*strength2*bMask; // push from pixel to brush center 
    float2 dUVT2 = float2(-dUV.y,dUV.x)*strength2*bMask; // left normal to direction 
    float2 dUVT3 = float2(dUV.y,-dUV.x)*strength2*bMask;  // right normal to direction
   
    Velocity_out[id] = VIN + float4(dUV,0,0);// + float4(dUVT,0,0) + float4(dUVT2,0,0) +float4(dUVT3,0,0);       
}


float3 mixSubtractive(float4 dIn, float4 dBrush, float amountBrush)
{
// these are from the scott allen burns method
// does the mixing in reflectance curve space using a reference 
float rho_R[36] = {0.021592459f, 0.020293111f, 0.021807906f, 0.023803297f, 0.025208132f, 0.025414957f, 0.024621282f, 0.020973705f, 0.015752802f, 0.01116804f, 0.008578277f,  0.006581877f, 0.005171723f, 0.004545205f, 0.00414512f, 0.004343112f, 0.005238155f, 0.007251939f, 0.012543656f, 0.028067132f, 0.091342277f, 0.484081092f, 0.870378324f, 0.939513128f, 0.960926994f, 0.968623763f, 0.971263883f, 0.972285819f, 0.971898742f, 0.972691859f, 0.971734812f, 0.97234454f, 0.97150339f, 0.970857997f, 0.970553866f, 0.969671404f};
float rho_G[36] = {0.010542406f, 0.010878976f, 0.011063512f, 0.010736566f, 0.011681813f, 0.012434719f, 0.014986907f, 0.020100392f, 0.030356263f, 0.063388962f, 0.173423837f, 0.568321142f, 0.827791998f, 0.916560468f, 0.952002841f, 0.964096452f, 0.970590861f, 0.972502542f, 0.969148203f, 0.955344651f, 0.892637233f, 0.5003641f, 0.116236717f, 0.047951391f, 0.027873526f, 0.020057963f, 0.017382174f, 0.015429109f, 0.01543808f, 0.014546826f, 0.015197773f, 0.014285896f, 0.015069123f, 0.015506263f, 0.015545797f, 0.016302839f};
float rho_B[36] = {0.967865135f, 0.968827912f, 0.967128582f, 0.965460137f, 0.963110055f, 0.962150324f, 0.960391811f, 0.958925903f, 0.953890935f, 0.925442998f, 0.817997886f, 0.42509696f , 0.167036273f, 0.078894327f, 0.043852038f, 0.031560435f, 0.024170984f, 0.020245519f, 0.01830814f, 0.016588218f, 0.01602049f, 0.015554808f, 0.013384959f, 0.012535491f, 0.011199484f, 0.011318274f, 0.011353953f, 0.012285073f, 0.012663188f, 0.012761325f, 0.013067426f, 0.013369566f, 0.013427487f, 0.01363574f, 0.013893597f, 0.014025757f};


float T1[36] = {  .0000547813,  0.000184722, 0.000935514, 0.003096265, 0.009507714, 0.017351596, 0.022073595, 0.016353161, 0.002002407, -0.016177731,-0.033929391,-0.046158952,-0.06381706 ,-0.083911194, -0.091832385, -0.08258148 ,-0.052950086, -0.012727224, 0.037413037, 0.091701812, 0.147964686, 0.181542886, 0.210684154,  0.210058081 ,  0.181312094, 0.132064724,  0.093723787,  0.057159281,  0.033469657,  0.018235464,   0.009298756,   0.004023687,  0.002068643,  0.00109484  , 0.000454231,    0.000255925};
float T2[36] = { -.0000465552, -0.000157894,-0.000806935,-0.002707449,-0.008477628,-0.016058258,-0.02200529 ,-0.020027434,-0.011137726,  0.003784809, 0.022138944, 0.038965605, 0.063361718, 0.095981626,  0.126280277,  0.148575844, 0.149044804,  0.14239936 , 0.122084916, 0.09544734 , 0.067421931, 0.035691251, 0.01313278 , -0.002384996 , -0.009409573,-0.009888983, -0.008379513, -0.005606153, -0.003444663, -0.001921041,  -0.000995333,  -0.000435322, -0.000224537, -0.000118838 , -0.0000493038, -.0000277789};
float T3[36] = { 0.00032594  ,  0.001107914, 0.005677477, 0.01918448 , 0.060978641, 0.121348231, 0.184875618, 0.208804428, 0.197318551,  0.147233899, 0.091819086, 0.046485543, 0.022982618, 0.00665036 , -0.005816014, -0.012450334,-0.015524259, -0.016712927,-0.01570093 ,-0.013647887,-0.011317812,-0.008077223,-0.005863171, -0.003943485 , -0.002490472,-0.001440876, -0.000852895, -0.000458929, -0.000248389, -0.000129773,  -.0000641985,  -.0000271982, -.0000138913, -.00000735203, -.00000305024, -.00000171858};


    // convert colors to reflectance curves 
    float reflCurveIn[36];
    float reflCurveBrush[36];
    float reflCurveOut[36];

    float volumeIn = length(dIn);
    float volumeBrush = length(dBrush) + amountBrush;

    for(int i=0;i<36;i++){
        reflCurveIn[i]    = dIn.r   *rho_R[i] + dIn.g   *rho_G[i] + dIn.b   *rho_B[i];
        reflCurveBrush[i] = dBrush.r*rho_R[i] + dBrush.g*rho_G[i] + dBrush.b*rho_B[i];
    }
     //float volume = dIn.r + dIn.g + dIn.b +  amountBrush;
     float totalVolume = volumeIn + amountBrush;

     float ratio =  amountBrush/(1.0f + totalVolume); 

    // mix the reflectance curves (multiply)
    for(int j=0;j<36;j++){
        reflCurveOut[j] = reflCurveIn[j]*(1.0-ratio) + ratio*reflCurveBrush[j];
    }

    // convert back to RGB
    float3 col = float3(0,0,0);
    for(int k=0;k<36;k++){
        col.r += T1[k]*reflCurveOut[k];
        col.g += T2[k]*reflCurveOut[k];
        col.b += T3[k]*reflCurveOut[k];
    }

    // volume calc
    // amountBrush is the amount of pigment coming into the pixel
    // dIn is the amount of volume of pigment across the entire pixel already in there
    // volume = dIn.r + dIn.g + dIn.b
    // total new volume = volume + amountBrush
    // float volume = dIn.r + dIn.g + dIn.b + amountBrush;
    // float ratio = amountBrush/volume; 
    // float3 v = float3(  dIn.r + dBrush.r*amountBrush, 
    //                     dIn.g + dBrush.g*amountBrush
    //                     dIn.b + dBrush.b*amountBrush );
    // float3 r = float3(dBrush.r*amountBrush/v.r,
    //     dBrush.g*amountBrush/v.g
    //     dBrush.b*amountBrush/v.b);

    // float3 dOUt = 
    //float3 dOut = dIn *(1.0f- ratio) + dBrush*ratio;
    return col;
}


 // advect needs:
 //    - input: Density_in (Buffer)
 //    - input: Velocity_in (vector)
 //    - input: dt (timestep)

 //    - output: Density_out (Buffer) - advected


[numthreads(8,8,1)]
void Advect(uint2 id: SV_DispatchThreadID)
{
    /* perform the advection here on the current pixel */
    uint2 dim;
    Density_out.GetDimensions(dim.x,dim.y);
    float2 uv = (id + 0.5)/dim;

    float4 b = Boundary_in.SampleLevel(samplerBoundary_in, uv, 0);
  //  float4 d = Density_in.SampleLevel(samplerDensity_in, uv, 0);
    // FIXME

    // what is the friction due to the canvas texture?
    // proportional to the height of the canvas, if the canvas is tall then it collects more paint thus higher friction
    // 
  //  float friction = b.r;

     float4 v = Velocity_in[id];
     float3 v1 = (float3(v.x,v.y,0));
     float3 v2 = (float3(v.x,v.y,b.r));
    // float B = friction;//saturate(dot(v1,v2));

     float2 vv = float2(v.x,v.y);///B; // weird bug
     //vv = clamp(vv - normalize(vv)*friction,float2(-0.5,-0.5), float2(0.5, 0.5)) ;
     vv = vv * float2((float)dim.y/(float)dim.x, 1) ;
    
    float4 H = HEIGHTMAP_in.SampleLevel(samplerHEIGHTMAP_in, uv, 0);

    float2 vdt = clamp(vv, float2(-0.5,-0.5), float2(0.5, 0.5))*dt;

    /* need to do the linear backtrace here */
    // Height H is essentially the concentration of the liquid at this cell
    float2 deltaUV = (uv - vdt/H.r); 
     
    Density_out[id] = Density_in.SampleLevel(samplerDensity_in, deltaUV, 0);
}


[numthreads(8,8,1)]
void AdvectC(uint2 id: SV_DispatchThreadID)
{
    /* perform the advection here on the current pixel */
    // uint2 dim;
    // Density_out.GetDimensions(dim.x,dim.y);
    // float2 uv = (id + 0.5)/dim;

    // /* get velocity */
    //  float4 v = Velocity_in[id];
    //  float2 vv = float2(v.x,v.y);
    //  vv = vv * float2((float)dim.y/(float)dim.x, 1);


    // /* need to do the linear backtrace here */
    // float2 vdt = clamp(vv*dt, float2(-0.005,-0.005), float2(0.005, 0.005));
    // float2 deltaUV = uv - vdt;//, float2(0,0), float2(0.005, 0.005)); 

    // // get density at our current location, 
    // float4 dprev = Density_in[id]; 

    // /* backtraced density, samplelevel will interpolate for us */
    // float4 DD = Density_in.SampleLevel(samplerDensity_in, deltaUV, 0);

   // Density_out[id] = DD;//float4(mixSubtractive(dprev,DD,0.8f),1);
}


    // GaussSeidelIteration()
    //  - single iteration of the simple gauss seidel relaxation method
    //  - input: Density_in
    //  - Ouput: Density_out

[numthreads(8,8,1)]
void GaussSeidelIteration(uint2 id: SV_DispatchThreadID)
{
    uint2 dim;
    Density_out.GetDimensions(dim.x,dim.y);
    float2 uv = (id + 0.5)/dim;
  
    float4 H = HEIGHTMAP_in.SampleLevel(samplerHEIGHTMAP_in, uv, 0);

    float4 d00 = Density_in[id];
    float4 d10 = Density_in[id + int2(-1,0)];
    float4 d20 = Density_in[id + int2(1,0)] ;
    float4 d01 = Density_in[id + int2(0,-1)] ;
    float4 d02 = Density_in[id + int2(0,1)] ;
 
    float a = DiffusionConstant_a;// * 0.01f*length(H);
    float cRecip = 1.0f/DiffusionConstant_c;
    float4 val = (d00 + a*(d10 + d20 + d01 + d02))*cRecip;
 

    Density_out[id] = val;
      
}


// project has 3 partssdf
// 1. Compute Divergence
// 2. solve for pressure - just uses GaussSeidelIteration again
// 3. use change in pressure to remove velocity from velocity field 

[numthreads(8,8,1)]
void Project1_Divergence(uint2 id: SV_DispatchThreadID)
{
    uint2 dim;
    Divergence_out.GetDimensions(dim.x,dim.y);
    // need:
    // input: Velocity_in
    // output: Divergence_out, Pressure_out
    float v10 = Velocity_in[id + int2(1,0)].x;
    float v20 = Velocity_in[id + int2(-1,0)].x;
    float v01 = Velocity_in[id + int2(0,1)].y;
    float v02 = Velocity_in[id + int2(0,-1)].y;
    float div = -(v10 - v20 + v01 - v02)/dim.y/2;
    Pressure_out[id] = 0.0f;
    Divergence_out[id] = div;
}

[numthreads(8,8,1)]
void Project3_ApplyPressure(uint2 id:SV_DispatchThreadID)
{
    uint2 dim;
    Velocity_out.GetDimensions(dim.x,dim.y);
    // inputt: Pressure_in
    // // outpu: Velocity_out
    float p10 = Pressure_in[id + int2(1,0)];
    float p20 = Pressure_in[id + int2(-1,0)];
    float p01 = Pressure_in[id + int2(0,1)];
    float p02 = Pressure_in[id + int2(0,-1)];
    float vx = Velocity_in[id].x;
    float vy = Velocity_in[id].y;
    float4 vF = float4(vx - 0.5f*(p10 - p20)*dim.x, vy - 0.5f*(p01 - p02)*dim.y, 0,0);
    Velocity_out[id] = vF;
}

float3 coshi(float3 val) { float3 e = exp(val); return (e + float3(1,1,1) / e) / float3(2,2,2); }
float3 tanhi(float3 val) { float3 e = exp(val); return (e - float3(1,1,1) / e) / (e + float3(1,1,1) / e); }
float3 sinhi(float3 val) { float3 e = exp(val); return (e - float3(1,1,1) / e) / float3(2,2,2); }



// Kubelka-Munk reflectance and transmitance model
void KM(float3 K, float3 S, float x, out float3 R, out float3 T) {
    float3 a = (K + S) / S;
    float3 b = sqrt(a * a - float3(1.0, 1.0, 1.0));
    float3 bSx = b * S * float3(x, x, x);
    float3 sinhi_bSx = sinhi(bSx);
    float3 c = a * sinhi_bSx + b * coshi(bSx);
        
    R = sinhi_bSx / c;
    T = b / c;
}

void CompositeLayers(float3 R0, float3 T0, float3 R1, float3 T1, out float3 R, out float3 T) {
    float3 tmp = float3(1,1,1) / (float3(1,1,1) - R0 * R1);
    R = R0 + T0 * T0 * R1 * tmp;
    T = T0 * T1 * tmp;
}

[numthreads(8,8,1)]
void ConvertPigmentsToRGB(uint2 id:SV_DispatchThreadID)
{
    // input: Pigments1
    // intput: pigments2
    // intput: volume
    // output: rgb
    uint2 dim;
    Colour_out.GetDimensions(dim.x,dim.y);
    float2 uv = (id + 0.5)/dim;
    float4 p1 = Pigments1_in[id];
    float4 p2 = Pigments2_in[id];
    float4 b1 = BaseLayer1_in[id];
    float4 b2 = BaseLayer2_in[id];
    
    float4 vol = PaintVolume_in[id];
    
// each pigment channel represents a different paint 
// we need to combine them using the concentrations here using K/S reflectance functions

float3 K_QuinacridoneRose = float3(0.22, 1.47, 0.57);
float3 S_QuinacridoneRose = float3(0.05, 0.003, 0.03);
float3 K_FrenchUltramarine = float3(0.86, 0.86, 0.06);
float3 S_FrenchUltramarine = float3(0.005, 0.005, 0.09);
float3 K_CeruleanBlue = float3(1.52, 0.32, 0.25);
float3 S_CeruleanBlue = float3(0.06, 0.26, 0.40);
float3 K_HookersGreen = float3(1.62, 0.61, 1.64);
float3 S_HookersGreen = float3(0.01, 0.012, 0.003);
float3 K_HansaYellow = float3(0.06, 0.21, 1.78);
float3 S_HansaYellow = float3(0.50, 0.88, 0.009);
float3 K_CadmiumRed = float3(0.14, 1.08, 1.68);
float3 S_CadmiumRed = float3(0.77, 0.015, 0.018);
float3 K_IndianRed = float3(0.46, 1.07, 1.50);
float3 S_IndianRed = float3(1.28, 0.38, 0.21);
float3 K_InterferenceLilac = float3(0.08, 0.11, 0.07);
float3 S_InterferenceLilac = float3(1.25, 0.42, 1.43);

    float3 K = p1.r * K_QuinacridoneRose + p1.g * K_FrenchUltramarine + p1.b * K_CeruleanBlue + p1.a*K_HookersGreen + p2.r*K_HansaYellow + p2.g*K_CadmiumRed + p2.b*K_IndianRed + p2.a*K_InterferenceLilac;
    float3 S = p1.r * S_QuinacridoneRose + p1.g * S_FrenchUltramarine + p1.b * S_CeruleanBlue + p1.a*S_HookersGreen + p2.r*S_HansaYellow + p2.g*S_CadmiumRed + p2.b*S_IndianRed + p2.a*S_InterferenceLilac;
    
    float3 KB = b1.r * K_QuinacridoneRose + b1.g * K_FrenchUltramarine + b1.b * K_CeruleanBlue + b1.a*K_HookersGreen + b2.r*K_HansaYellow + b2.g*K_CadmiumRed + b2.b*K_IndianRed + b2.a*K_InterferenceLilac;
    float3 SB = b1.r * S_QuinacridoneRose + b1.g * S_FrenchUltramarine + b1.b * S_CeruleanBlue + b1.a*S_HookersGreen + b2.r*S_HansaYellow + b2.g*S_CadmiumRed + b2.b*S_IndianRed + b2.a*S_InterferenceLilac;


    // convert to R,T
    float3 R,T,R0,T0;
    float L1 = length(KB+SB);
    float L2 = length( K+S);
    float totalL = L1+L2;

    float amountB = L1/totalL;
    float amountN = L2/totalL;
    float DRY_RATE = 0.5; //FIXME - USER PARAMETER

    // get K,S, from Base Layer 
    KM(KB, SB, DRY_RATE, R0,T0);
    KM(K,S,1.0f-DRY_RATE, R,T);
   // T0 = float3(0,0,0);
    CompositeLayers(R0,T0, R,T, R0,T0);

    Colour_out[id] = (float4(R0+T0,0));

    float rate = 0.0001f; // FIXME : USER PARAMETER
    BaseLayer1_out[id] = saturate(b1 + rate*p1);
    BaseLayer2_out[id] = saturate(b2 + rate*p2);
    Pigments1_out[id] = (1.0f-rate)*p1;
    Pigments2_out[id] = (1.0f-rate)*p2;

    float h = CANVAS_in.SampleLevel(samplerCANVAS_in, uv, 0).r;
    float height = length(Pigments1_out[id])+ length(Pigments2_out[id]) + length(BaseLayer1_out[id]) + length(BaseLayer2_out[id]);;//length(abs(R0+T0)+abs(R+T));

   // float height = length(R0+T0+R+T);//+ length(BaseLayer1_out[id]) + length(BaseLayer2_out[id]);
//    float height = length(Pigments1_out[id]) + length(Pigments2_out[id]) + length(BaseLayer1_out[id]) + length(BaseLayer2_out[id]);

    HEIGHTMAP_out[id] = max(abs(height),abs(h));
}

[numthreads(8,8,1)]
void AddDensityToLocation(uint2 id:SV_DispatchThreadID)
{
    // input: density texture (RGB)
    // input: Input location, channel to add density to (float3) 
    // output: density_out
    uint2 dim;
    Density_out.GetDimensions(dim.x,dim.y);
    float2 I = float2(InputX,InputY);
    float4 d = Density_in[id];
    float4 d2 = Density2_in[id];

    float2 uv = (id + 0.5)/dim;
   // float dist = length(uv-I);
    float strength = 0.05f;

    // brush mask is 1 where the brush is currently, 0 everywhere else
    float bMask = BrushMask_in.SampleLevel(samplerBrushMask_in, uv, 0).r;

    // should really add a function here to convert the current pixel to brush coordinates
    // then we can sample the brush texture map to get the strength of the current brush pixel
    // then we can just use brush distance fields as a strength 
   // if(dist < BRUSH_WIN_WIDTH) strength= 0.01f;//(.0001f/(dist*dist));
     
    // bp and bp2 are masks, they are only 1.0f in one of the channels where the brush color is to be AddDensityToLocation
    float4 bp = BrushPaint1;//BrushTexture_in[id];
    float4 bp2 = BrushPaint2;//BrushTexture2_in[id];
    
    // basically this only applies to pixels in the mask, 
    // sample a binary mask value and mulitply to mask out pixels
    float4 brushVolume = bp*strength*bMask;
    float4 brushVolume2 = bp2*strength*bMask;

    Density_out[id] = (d + brushVolume);
    Density2_out[id] =(d2 + brushVolume2);
 
}

[numthreads(8,8,1)]
void TransferBrushPaint(uint3 id:SV_DispatchThreadID){
    uint2 dim;
    Density_out.GetDimensions(dim.x,dim.y);
    float2 uv = (id + 0.5)/dim;

    float4 d = Density_out[id.xy];
    float4 d2 = Density2_out[id.xy];
    float bMask = BrushMask_in.SampleLevel(samplerBrushMask_in, uv, 0).r;

    // WE NEED TO FIRST TRANSFORM INTO THE BRUSH COORDINATE FRAME IN ORDER TO ADD PAINT INTO THE BRUSH 
    // FIXME FIXME, OTHERWISE WE JUST GET THE LAST SAMPLE AND NOT THE SUM OF THE SAMPLES

    // // brush texture in are our paint pigments densities 
    // so our brush samples are the 8 paint pigment densities (0..maxDensity)
    float2 Buv = float2(InputX,InputY);
    float4 BrushSample = BrushTexture_in.SampleLevel(samplerBrushTexture_in, Buv, 0);
    float4 BrushSample2 = BrushTexture2_in.SampleLevel(samplerBrushTexture2_in, Buv, 0);

    // compute how much paint is moving into the brush
    float rate = 0.1f;
    float4 bp1 = BrushSample*rate;
    float4 bp2 = BrushSample2*rate;

    // add pigment to the brush location
    // FIXME THINK HARD ABOUT THIS HERE, 
    BrushTexture_out[id.xy]  =  bp1;
    BrushTexture2_out[id.xy] =  bp2;

    // remove pigment from current pixel 
    Density_out[id.xy]  = clamp(d  - (bp1*bMask), 0.0f,d);
    Density2_out[id.xy] = clamp(d2 - (bp2*bMask), 0.0f,d2);

}

[numthreads(8,8,1)]
void DepositBrushPaint(uint2 id:SV_DispatchThreadID){
    uint2 dim;
    Density_out.GetDimensions(dim.x,dim.y);
    float2 I = float2(InputX,InputY);
    float2 uv = (id + 0.5)/dim;
    // float dist = length(uv-I);
    // float strength = 0.01f;

    float bMask = BrushMask_in.SampleLevel(samplerBrushMask_in, uv, 0).r;
    
    float4 d = Density_out[id];
    float4 d2 = Density2_out[id];

    // our brush texture in was populated with the pigment samples that we transferred to the brush
    // note that it doesn't matter where we sample from as the entire image has the same value at this point
    // min=0, max = 0.3 units
    float2 Buv = uv;
    float4 BrushSample = BrushTexture_in[id];//BrushTexture_in.SampleLevel(samplerBrushTexture_in, Buv, 0);
    float4 BrushSample2 = BrushTexture2_in[id];//BrushTexture2_in.SampleLevel(samplerBrushTexture2_in, Buv, 0);
    
    // current canvas height at current pixel
    float h1 = HEIGHTMAP_in.SampleLevel(samplerHEIGHTMAP_in, uv, 0);
   
    // float amount = length(d)+length(BrushSample*strength);
    // float ratio = length(d)/amount;
    // float amount2 = length(d2)+length(BrushSample2*strength);
    // float ratio2 = length(d2)/amount2;
    float rate = 0.01f; // should be the same as transfer to brush or realistically this shoudl be based on pressure 

    float4 p1 = d + (BrushSample*bMask);
    float4 p2 = d2 + (BrushSample2*bMask);
    Density_out[id]  = clamp(d  + (BrushSample *bMask)*(1.0f - rate), 0.0f,100000.0f);
    Density2_out[id] = clamp(d2 + (BrushSample2*bMask)*(1.0f - rate), 0.0f,100000.0f);

    BrushTexture_out[id] = saturate(BrushSample - BrushSample*rate);
    BrushTexture2_out[id] = saturate(BrushSample2 - BrushSample2*rate);

    


   // BrushTexture_out[id] = (BrushSample - BrushSample*(1.0f-ratio))*h1;
   // BrushTexture2_out[id] = (BrushSample2 - BrushSample2*(1.0f-ratio2))*h1;

    // maybe put a residual here onto the base canvas layer somehow
    float DRY_RATE = PAINT_DRY_RATE;//0.001f;
    float4 b1 = BaseLayer1_in[id];
    float4 b2 = BaseLayer2_in[id];
    BaseLayer1_out[id] = (b1 + p1*DRY_RATE);
    BaseLayer2_out[id] = (b2 + p2*DRY_RATE);

}

[numthreads(8,8,1)]
void ComputeNormalMap(uint2 id: SV_DispatchThreadID)
{
    uint2 dim;
    Density_in.GetDimensions(dim.x,dim.y);
    float2 uv = (id + 0.5)/dim;  // (x,y)
    float2 uv1 = (float2(id.x+1,id.y) + 0.5)/dim; //(x+1,y)
    float2 uuv1 = (float2(id.x-1,id.y) + 0.5)/dim; //(x-1,y)

    float2 uv2 = (float2(id.x,id.y+1) + 0.5)/dim; // (x,y+1)
    float2 uvv2 = (float2(id.x,id.y-1) + 0.5)/dim; // (x,y-1)


    float4 c = Density_in[id];
    float h0 = HEIGHTMAP_in.SampleLevel(samplerHEIGHTMAP_in, uv, 0); // x,y

    float h1 = HEIGHTMAP_in.SampleLevel(samplerHEIGHTMAP_in, uv1, 0); // x+1,y
    float h3 = HEIGHTMAP_in.SampleLevel(samplerHEIGHTMAP_in, uuv1, 0); // x-1,y

    float h2 = HEIGHTMAP_in.SampleLevel(samplerHEIGHTMAP_in, uv2, 0); // x,y+1
    float h4 = HEIGHTMAP_in.SampleLevel(samplerHEIGHTMAP_in, uvv2, 0); // x,y-1

    float r = 0.5f;
    float h00 = CANVAS_in.SampleLevel(samplerCANVAS_in, uv, 0)*r;
    float h11 = CANVAS_in.SampleLevel(samplerCANVAS_in, uv1, 0)*r;
    float h22 = CANVAS_in.SampleLevel(samplerCANVAS_in, uv2, 0)*r;
    float h111 = CANVAS_in.SampleLevel(samplerCANVAS_in, uuv1, 0)*r;
    float h222 = CANVAS_in.SampleLevel(samplerCANVAS_in, uvv2, 0)*r;

    // float gx1 = ((-h3 + 2.0f*h0 + h1));
    // float gy1 = ((-h4 + 2.0f*h0 + h2));
    // float gx2 = ((-h111 + 2.0f*h00 + h11));
    // float gy2 = ((-h222 + 2.0f*h00 + h22));



  

     float3 P0 = float3(0,0  ,0.5f*(h0));
    float3 P1 = float3(0,-1 ,0.5f*(h4));
    float3 P2 = float3(1,0  ,0.5f*(h1));
    float3 P3 = float3(0,1  ,0.5f*(h2));
    float3 P4 = float3(-1,0 ,0.5f*(h3));
  

    //  float3 P0 = float3(0,0  ,0.5f*(h0+h00));
    // float3 P1 = float3(0,-1 ,0.5f*(h4+h222));
    // float3 P2 = float3(1,0  ,0.5f*(h1+h11));
    // float3 P3 = float3(0,1  ,0.5f*(h2+h22));
    // float3 P4 = float3(-1,0 ,0.5f*(h3+h111));

    float3 P0P1 = P1-P0;
    float3 P0P3 = P3-P0;
    float3 P0P2 = P2-P0;
    float3 P0P4 = P4-P0;


    float3 A = P0P1 - P0P3;
    float3 B = P0P2 - P0P4;
    float3 N = cross(A,B);
    Normals_out[id] = normalize(float4(N,1));
    // float mx1 = -(gx1+gx2);//max(-h1,-h11);
    // float mx2 = -(gy1+gy2);//max(-h2,-h22);


    // float height1 = mx1;//mn1;//clamp(h1 + h11,0,max);
    // float height2 = mx2;//mn2;//lamp(h2 + h22,h2,h22);
    // float3 n1 = normalize(float3(1,0,height1));
    // float3 n2 = normalize(float3(0,1,height2));
    // float3 n3 = normalize(cross(n2,n1));
    // Normals_out[id] = normalize(float4(n3,1));
}
